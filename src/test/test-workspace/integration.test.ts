import * as assert from 'assert';
import * as vscode from 'vscode';
import { join } from 'node:path';
import { readFileSync } from 'node:fs';
import { readFile } from 'node:fs/promises';
import { deleteFiles, waitForFile } from '../utilsTest.js';
import { execPromisify } from '../../shared/execPromisify.js';

suite('Extension Test Suite', () => {
  let workspacePath: string;
  let extension: vscode.Extension<any>;
  const extensionId = 'DorianMassoulier.repomix-runner';

  suiteSetup(async function () {
    // Initialize extension
    extension = vscode.extensions.getExtension(extensionId)!;
    assert.ok(extension, 'Extension is not found');
    await extension.activate();
    assert.ok(extension.isActive, 'Extension is not active');

    // Initialize workspace path
    const workspaceFolders = vscode.workspace.workspaceFolders;
    assert.ok(workspaceFolders && workspaceFolders.length > 0, 'No workspace folder found');
    workspacePath = workspaceFolders[0].uri.fsPath;
  });

  setup(async () => {
    deleteFiles(join(workspacePath, '**/*.test*'));
  });

  teardown(async () => {
    deleteFiles(join(workspacePath, '**/*.test*'));
  });

  test('Extension should be activated', () => {
    assert.ok(extension.isActive, 'Extension is not active');
  });

  test('Test Workspace folder should be found', () => {
    assert.ok(
      workspacePath.endsWith('src/test/test-workspace/root'),
      `Test Workspace path "${workspacePath}" does not end with "src/test/test-workspace/root"`
    );
  });

  test('run repomixRunner.run command and verify file creation for the whole workspace', async function () {
    this.timeout(10000);
    await compareGeneratedFiles('');
  });

  test('run repomixRunner.run at root/foo/bar/baz and verify file creation for this directory', async function () {
    this.timeout(10000);
    await compareGeneratedFiles('foo/bar/baz/');
  });

  /**
   * Compares the files generated by the extension and the native repomix CLI for a given target directory.
   *
   * This function performs the following steps:
   * 1. Constructs the path for the target subdirectory within the workspace.
   * 2. Executes the 'repomixRunner.run' command on the subdirectory using the extension.
   * 3. Waits for the extension-generated file to be created and reads its content, excluding the first two lines (timestamp -> non deterministic).
   * 4. Deletes the extension-generated file to clean up.
   * 5. Then same steps for the native repomix CLI
   * 6. Asserts that the content of the files generated by the extension and the native CLI are identical.
   *
   * This function can break if:
   * - The 'repomixRunner.run' command fails to execute or does not generate the expected file.
   * - The native repomix CLI command fails to execute or does not generate the expected file.
   * - The file paths are incorrect or inaccessible.
   * - The content of the generated files differ, causing the assertion to fail.
   *
   * @param {string} targetDirectory - The target directory within the workspace to run the commands on.
   */
  async function compareGeneratedFiles(targetDirectory: string) {
    const subDirectoryPath = join(workspacePath, targetDirectory);
    const uri = vscode.Uri.file(subDirectoryPath);

    // run the extension on the subdirectory
    await vscode.commands.executeCommand('repomixRunner.run', uri);
    const extentionGeneratedFilePath = join(subDirectoryPath, 'extension-data.test.txt');
    await waitForFile(extentionGeneratedFilePath);
    const extensionGeneratedData = readFileSync(extentionGeneratedFilePath, 'utf8')
      .split('\n')
      .slice(2)
      .join('\n');
    deleteFiles([extentionGeneratedFilePath]);

    // run the native repomix CLI on the subdirectory
    await execPromisify(
      `npx -y repomix ${targetDirectory} --output ${targetDirectory}native-data.test.txt`,
      {
        cwd: workspacePath,
      }
    );
    const testFilePath = join(subDirectoryPath, 'native-data.test.txt');
    await waitForFile(testFilePath);
    const testData = readFileSync(testFilePath, 'utf8').split('\n').slice(2).join('\n');
    deleteFiles([testFilePath]);

    assert.strictEqual(
      testData,
      extensionGeneratedData,
      'The created file content does not match the expected content'
    );
  }
});
